# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

AV_CODEC_ROOT_DIR = "//foundation/multimedia/av_codec"

config("av_codec_service_config") {
  visibility = [ ":*" ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Wunused-parameter",
  ]

  # include_dirs = [
  #   "avcodeclist/client",
  #   "codec/server/include",
  #   "source/server/include",
  #   "$AV_CODEC_ROOT_DIR/services/include",
  #   "$AV_CODEC_ROOT_DIR/services/services/codec",
  #   "$AV_CODEC_ROOT_DIR/services/services/source",
  #   "$AV_CODEC_ROOT_DIR/services/dfx/include",
  #   "$AV_CODEC_ROOT_DIR/services/engine/avcodeclist",
  #   "$AV_CODEC_ROOT_DIR/interfaces/inner_api/native",
  #   "$AV_CODEC_ROOT_DIR/interfaces/kits/c",
  # ]

  include_dirs = [
    "$AV_CODEC_ROOT_DIR/",
    "$AV_CODEC_ROOT_DIR/frameworks/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avcodec/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avcodeclist/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avdemuxer/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avmuxer/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avsource/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avdemuxer",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avmuxer",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/common",
    "$AV_CODEC_ROOT_DIR/frameworks/native/common",
    "$AV_CODEC_ROOT_DIR/interfaces/",
    "$AV_CODEC_ROOT_DIR/interfaces/inner_api/",
    "$AV_CODEC_ROOT_DIR/interfaces/inner_api/native",
    "$AV_CODEC_ROOT_DIR/interfaces/kits/",
    "$AV_CODEC_ROOT_DIR/interfaces/kits/c/",
    "$AV_CODEC_ROOT_DIR/interfaces/kits/c/avmuxer/",
    "$AV_CODEC_ROOT_DIR/services/",
    "$AV_CODEC_ROOT_DIR/services/dfx/",
    "$AV_CODEC_ROOT_DIR/services/dfx/include/",
    "$AV_CODEC_ROOT_DIR/services/engine/",
    "$AV_CODEC_ROOT_DIR/services/engine/avcodeclist",
    "$AV_CODEC_ROOT_DIR/services/engine/demuxer",
    "$AV_CODEC_ROOT_DIR/services/engine/demuxer/include",
    "$AV_CODEC_ROOT_DIR/services/engine/factory",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/common",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/core",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/interface",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/plugins/",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/plugins/demuxer/",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/plugins/demuxer/ffmpeg_demuxer/",
    "$AV_CODEC_ROOT_DIR/services/engine/source",
    "$AV_CODEC_ROOT_DIR/services/engine/source/include",
    "$AV_CODEC_ROOT_DIR/services/include/",
    "$AV_CODEC_ROOT_DIR/services/services/",
    "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/",
    "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/client",
    "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/ipc",
    "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/server",
    "$AV_CODEC_ROOT_DIR/services/services/codec/",
    "$AV_CODEC_ROOT_DIR/services/services/codec/client",
    "$AV_CODEC_ROOT_DIR/services/services/codec/ipc",
    "$AV_CODEC_ROOT_DIR/services/services/codec/server",
    # "$AV_CODEC_ROOT_DIR/services/services/codecbase/",
    # "$AV_CODEC_ROOT_DIR/services/services/codecbase/server/",
    # "$AV_CODEC_ROOT_DIR/services/services/codecbase/server/include/",
    "$AV_CODEC_ROOT_DIR/services/engine/base/",
    "$AV_CODEC_ROOT_DIR/services/engine/base/include/",
    "$AV_CODEC_ROOT_DIR/services/engine/demuxer/",
    "$AV_CODEC_ROOT_DIR/services/engine/demuxer/include",
    "$AV_CODEC_ROOT_DIR/services/engine/factory/",
    "$AV_CODEC_ROOT_DIR/services/engine/source/",
    "$AV_CODEC_ROOT_DIR/services/engine/source/include",
    "$AV_CODEC_ROOT_DIR/services/engine/source/hst_releated",
    "$AV_CODEC_ROOT_DIR/services/services/common/",
    "$AV_CODEC_ROOT_DIR/services/services/demuxer/",
    "$AV_CODEC_ROOT_DIR/services/services/demuxer/client/",
    "$AV_CODEC_ROOT_DIR/services/services/demuxer/ipc/",
    "$AV_CODEC_ROOT_DIR/services/services/demuxer/server/",
    "$AV_CODEC_ROOT_DIR/services/services/muxer/",
    "$AV_CODEC_ROOT_DIR/services/services/muxer/client",
    "$AV_CODEC_ROOT_DIR/services/services/muxer/ipc",
    "$AV_CODEC_ROOT_DIR/services/services/muxer/server",
    "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/",
    "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/client/",
    "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/ipc/",
    "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/server/",
    "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/server/include/",
    "$AV_CODEC_ROOT_DIR/services/services/source/",
    "$AV_CODEC_ROOT_DIR/services/services/source/client/",
    "$AV_CODEC_ROOT_DIR/services/services/source/ipc/",
    "$AV_CODEC_ROOT_DIR/services/services/source/server/",
    "$AV_CODEC_ROOT_DIR/services/utils/",
    "$AV_CODEC_ROOT_DIR/services/utils/include/",
    "//third_party/ffmpeg",
  ]

  if (target_cpu == "arm64") {
    av_codec_plugin_path = "\"/system/lib64/media/av_codec_plugins\""
  } else {
    av_codec_plugin_path = "\"/system/lib/media/av_codec_plugins\""
  }

  defines = []
  defines += av_codec_defines
  defines += [
    "AV_CODEC_PLUGIN_PATH=${av_codec_plugin_path}",
    "AV_CODEC_PLUGIN_FILE_TAIL=\".z.so\"",
    "OH_FILE_PLUGIN_PATH=\".\"",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("av_codec_service") {
  install_enable = true

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  
  configs = [
    ":av_codec_service_config",
    "$AV_CODEC_ROOT_DIR/services/dfx:av_codec_service_log_dfx_public_config",
  ]

  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/common/avcodec_errors.cpp",
    "common/avsharedmemory_ipc.cpp",
    "sa_avcodec/ipc/avcodec_listener_proxy.cpp",
    "sa_avcodec/ipc/avcodec_parcel.cpp",
    "sa_avcodec/ipc/avcodec_service_stub.cpp",
    "sa_avcodec/server/avcodec_server.cpp",
    "sa_avcodec/server/avcodec_server_manager.cpp",
  ]


  if (multimedia_av_codec_support_codec) {
    sources += [
      "codec/ipc/codec_listener_proxy.cpp",
      "codec/ipc/codec_service_stub.cpp",
      "codec/server/codec_server.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/base/codecbase.cpp",
    ]
  }
  if (multimedia_av_codec_support_codeclist) {
    sources += [
      "avcodeclist/ipc/avcodeclist_service_stub.cpp",
      "avcodeclist/server/avcodeclist_server.cpp",
    ]
  }
  if (multimedia_av_codec_support_muxer) {
    sources += [
      "muxer/ipc/avmuxer_stub.cpp",
      "muxer/server/avmuxer_server.cpp",
    ]
  }
  if (multimedia_av_codec_support_demuxer) {
    sources += [
      "demuxer/ipc/demuxer_service_stub.cpp",
      "demuxer/server/demuxer_server.cpp",

      "$AV_CODEC_ROOT_DIR/services/engine/demuxer/demuxer_engine_impl.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/factory/demuxer_factory.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/plugin/core/demuxer.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/plugin/core/plugin_loader.cpp",
    ]
  }
  if (multimedia_av_codec_support_source) {
    sources += [
      "source/ipc/source_service_stub.cpp",
      "source/server/source_server.cpp",

      "$AV_CODEC_ROOT_DIR/services/engine/source/source_engine_impl.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/source/hst_releated/plugin_buffer.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/source/hst_releated/media_source.cpp",
      "$AV_CODEC_ROOT_DIR/services/engine/source/source.cpp",
    ]
  }


  deps = [
    "$AV_CODEC_ROOT_DIR/services/dfx:av_codec_service_dfx",
    "$AV_CODEC_ROOT_DIR/services/utils:av_codec_format",
    "$AV_CODEC_ROOT_DIR/services/utils:av_codec_service_utils",
    "//third_party/ffmpeg:libohosffmpeg",
  ]

  external_deps = [
    "c_utils:utils",
    "ipc:ipc_single",
    "hiviewdfx_hilog_native:libhilog",
    "safwk:system_ability_fwk",
    "graphic_standard:surface",
  ]

  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}
