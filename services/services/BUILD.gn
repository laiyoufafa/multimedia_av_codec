# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

AV_CODEC_ROOT_DIR = "//foundation/multimedia/av_codec"

config("av_codec_service_config") {
  visibility = [ ":*" ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Wunused-parameter",
  ]

  include_dirs = [
    "codec/server/include",
    "source/server/include",
    "$AV_CODEC_ROOT_DIR/services/include",
    "$AV_CODEC_ROOT_DIR/services/services/codec",
    "$AV_CODEC_ROOT_DIR/services/services/source",
    "$AV_CODEC_ROOT_DIR/interfaces/inner_api/native",
    "$AV_CODEC_ROOT_DIR/services/dfx/include",
    "$AV_CODEC_ROOT_DIR/interfaces/kits/c",
  ]

  defines = []
  defines += av_codec_defines

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("av_codec_service") {
  install_enable = true

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/common/avcodec_errors.cpp",
    "common/avsharedmemory_ipc.cpp",
    "sa_avcodec/ipc/avcodec_listener_proxy.cpp",
    "sa_avcodec/ipc/avcodec_parcel.cpp",
    "sa_avcodec/ipc/avcodec_service_stub.cpp",
    "sa_avcodec/server/avcodec_server.cpp",
    "sa_avcodec/server/avcodec_server_manager.cpp",
  ]


  if (multimedia_player_framework_support_codec) {
    sources += [
      "codec/ipc/codec_listener_proxy.cpp",
      "codec/ipc/codec_service_stub.cpp",
      "codec/server/codec_server.cpp",
      "avcodeclist/ipc/avcodeclist_service_stub.cpp",
      "avcodeclist/server/avcodeclist_server.cpp",
      "sa_media/ipc/avcodeclist_parcel.cpp",
    ]
  }
  if (multimedia_player_framework_support_muxer) {
    sources += [
      "muxer/ipc/muxer_service_stub.cpp",
      "muxer/server/muxer_server.cpp",
    ]
  }

  configs = [
    ":av_codec_service_config",
    "$AV_CODEC_ROOT_DIR/services/dfx:av_codec_service_log_dfx_public_config",
  ]

  deps = [
    "$AV_CODEC_ROOT_DIR/services/dfx:av_codec_service_dfx",
    "$AV_CODEC_ROOT_DIR/services/utils:av_codec_format",
    "$AV_CODEC_ROOT_DIR/services/utils:av_codec_service_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "ipc:ipc_single",
  ]

  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}
