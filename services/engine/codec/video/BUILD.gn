import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

config("av_codec_config") {

  cflags = [
    "-frtti",
    "-fexceptions",
  ]
  cflags_cc = cflags
}


ohos_static_library("av_codec_video_ffmpeg_codec"){
    include_dirs=[
        "//foundation/graphic/graphic_2d/frameworks/surface/include",
        "//commonlibrary/c_utils/base/include",
        "$av_codec_root_dir/services/engine/base/include",
        "$av_codec_root_dir/services/engine/common/include",
        "$av_codec_root_dir/services/utils/include",
        "$av_codec_root_dir/interfaces/inner_api/native",
        "$av_codec_root_dir/interfaces/kits/c",
        "include",
        "$av_codec_root_dir/services/dfx/include",
        "//base/hiviewdfx/hisysevent/interfaces/native/innerkits/hisysevent/include",
        "//foundation/graphic/graphic_2d/interfaces/inner_api",
        "//foundation/graphic/graphic_2d/interfaces/inner_api/common",
        "//foundation/graphic/graphic_2d/utils/sync_fence/export",
        "//drivers/peripheral/display/interfaces/include",
        "//base/startup/init/interfaces/innerkits/include/syspara",
        "//third_party/ffmpeg",
    ]

    public_configs = [
        ":av_codec_config",
    ]
  defines = []
  defines += av_codec_defines

    sources=[
        "$av_codec_root_dir/services/engine/codec/video/fcodec.cpp",
    ]

    deps=[
        "//third_party/ffmpeg:libohosffmpeg",
        "//foundation/multimedia/av_codec/services/engine/common:av_codec_engine_common",
        "//foundation/multimedia/av_codec/services/engine/base:av_codec_codec_base",
    ]

    public_deps= [
        "//commonlibrary/c_utils/base:utils",
        "//foundation/multimedia/av_codec/services/utils:av_codec_service_utils",
        "//foundation/multimedia/av_codec/services/utils:av_codec_format",
        "//foundation/multimedia/av_codec/services/dfx:av_codec_service_dfx",
        "//third_party/bounds_checking_function:libsec_static",
        "//foundation/graphic/graphic_2d:libsurface",
        "//foundation/graphic/graphic_2d/utils:sync_fence",
        ]
    
    external_deps = [
        "c_utils:utils",
        "hisysevent_native:libhisysevent",
        "hitrace_native:hitrace_meter",
        "hiviewdfx_hilog_native:libhilog",
        "graphic_standard:surface" 
    ]

    subsystem_name = "multimedia"
    part_name = "av_codec"

}