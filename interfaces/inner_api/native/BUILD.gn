# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

AV_CODEC_ROOT_DIR = "//foundation/multimedia/av_codec"

config("av_codec_packege_include") {
  include_dirs = [
    "//foundation/multimedia/av_codec/",
    "//foundation/multimedia/av_codec/frameworks/",
    "//foundation/multimedia/av_codec/frameworks/native/",
    "//foundation/multimedia/av_codec/frameworks/native/avcodec/",
    "//foundation/multimedia/av_codec/frameworks/native/avcodeclist/",
    "//foundation/multimedia/av_codec/frameworks/native/avdemuxer/",
    "//foundation/multimedia/av_codec/frameworks/native/avmuxer/",
    "//foundation/multimedia/av_codec/frameworks/native/avsource/",
    "//foundation/multimedia/av_codec/frameworks/native/capi/",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avcodec",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avdemuxer",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avmuxer",
    "//foundation/multimedia/av_codec/frameworks/native/capi/common",
    "//foundation/multimedia/av_codec/frameworks/native/common",
    "//foundation/multimedia/av_codec/interfaces/",
    "//foundation/multimedia/av_codec/interfaces/inner_api/",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native",
    "//foundation/multimedia/av_codec/interfaces/kits/",
    "//foundation/multimedia/av_codec/interfaces/kits/c/",
    "//foundation/multimedia/av_codec/interfaces/kits/c/avmuxer/",
    "//foundation/multimedia/av_codec/services/",
    "//foundation/multimedia/av_codec/services/dfx/",
    "//foundation/multimedia/av_codec/services/dfx/include/",
    "//foundation/multimedia/av_codec/services/engine/",
    "//foundation/multimedia/av_codec/services/engine/avcodeclist",
    "//foundation/multimedia/av_codec/services/engine/plugin/",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/demuxer/",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/demuxer/ffmpeg_demuxer/",
    "//foundation/multimedia/av_codec/services/include/",
    "//foundation/multimedia/av_codec/services/services/",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/client",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/ipc",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/server",
    "//foundation/multimedia/av_codec/services/services/codec/",
    "//foundation/multimedia/av_codec/services/services/codec/client",
    "//foundation/multimedia/av_codec/services/services/codec/ipc",
    "//foundation/multimedia/av_codec/services/services/codec/server",
    "//foundation/multimedia/av_codec/services/services/codecbase/",
    "//foundation/multimedia/av_codec/services/services/codecbase/server/",
    "//foundation/multimedia/av_codec/services/services/codecbase/server/include/",
    "//foundation/multimedia/av_codec/services/services/common/",
    "//foundation/multimedia/av_codec/services/services/demuxer/",
    "//foundation/multimedia/av_codec/services/services/demuxer/client/",
    "//foundation/multimedia/av_codec/services/services/demuxer/ipc/",
    "//foundation/multimedia/av_codec/services/services/demuxer/server/",
    "//foundation/multimedia/av_codec/services/services/muxer/",
    "//foundation/multimedia/av_codec/services/services/muxer/client/",
    "//foundation/multimedia/av_codec/services/services/muxer/ipc/",
    "//foundation/multimedia/av_codec/services/services/muxer/server/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/client/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/ipc/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/server/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/server/include/",
    "//foundation/multimedia/av_codec/services/services/source/",
    "//foundation/multimedia/av_codec/services/services/source/client/",
    "//foundation/multimedia/av_codec/services/services/source/ipc/",
    "//foundation/multimedia/av_codec/services/services/source/server/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/server/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/server/include/",
    "//foundation/multimedia/av_codec/services/utils/",
    "//foundation/multimedia/av_codec/services/utils/include/",
  ]
}

config("av_codec_client_local_config") {
  include_dirs = [
    "$AV_CODEC_ROOT_DIR/services/services/factory",
    "$AV_CODEC_ROOT_DIR/services/engine/muxer",
    "$AV_CODEC_ROOT_DIR/services/engine/factory",
    "$AV_CODEC_ROOT_DIR/services/engine/muxer",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/common",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/core",
    "$AV_CODEC_ROOT_DIR/services/engine/plugin/interface",
  ]
}

config("av_codec_client_public_config") {
  include_dirs = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/avcodec",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avdemuxer",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avmuxer",
    "$AV_CODEC_ROOT_DIR/frameworks/native/avsource",
    "$AV_CODEC_ROOT_DIR/interfaces/inner_api/native",
    "$AV_CODEC_ROOT_DIR/interfaces/kits/c",
    "$AV_CODEC_ROOT_DIR/services/utils",
    "$AV_CODEC_ROOT_DIR/services/include",
    "$AV_CODEC_ROOT_DIR/services/dfx/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//utils/system/safwk/native/include",
    "//third_party/bounds_checking_function/include",
    "//commonlibrary/c_utils/base/include",
  ]

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = []
  defines += av_codec_defines

  if (target_cpu == "arm64") {
    av_codec_plugin_path = "\"/system/lib64/media/av_codec_plugins\""
  } else {
    av_codec_plugin_path = "\"/system/lib/media/av_codec_plugins\""
  }

  defines += [
    "AV_CODEC_PLUGIN_PATH=${av_codec_plugin_path}",
    "AV_CODEC_PLUGIN_FILE_TAIL=\".z.so\"",
  ]
}

ohos_shared_library("av_codec_client") {
  install_enable = true
    public_configs = [
      ":av_codec_client_local_config",
      ":av_codec_client_public_config",
      ":av_codec_packege_include",
  ]
  sources = [
#      "$AV_CODEC_ROOT_DIR/frameworks/native/avsource/avsource_impl.cpp",
      "$AV_CODEC_ROOT_DIR/frameworks/native/common/avcodec_errors.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/common/avsharedmemory_ipc.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/client/avcodec_client.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/ipc/avcodec_listener_stub.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/ipc/avcodec_parcel.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/sa_avcodec/ipc/avcodec_service_proxy.cpp",
  ]
  if (multimedia_av_codec_support_codec) {
    sources += [
      "$AV_CODEC_ROOT_DIR/frameworks/native/avcodec/avcodec_impl.cpp",
      "$AV_CODEC_ROOT_DIR/frameworks/native/avcodeclist/avcodeclist_impl.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/client/avcodeclist_client.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/avcodeclist/ipc/avcodeclist_service_proxy.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/codec/client/codec_client.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/codec/ipc/codec_listener_stub.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/codec/ipc/codec_service_proxy.cpp",
    ]
  }
  if (multimedia_av_codec_support_demuxer) {
    sources += [
 #     "$AV_CODEC_ROOT_DIR/frameworks/native/avdemuxer/avdemuxer_impl.cpp",
    ]
  }
  if (multimedia_av_codec_support_muxer) {
    sources += [
      "$AV_CODEC_ROOT_DIR/frameworks/native/avmuxer/avmuxer_impl.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/muxer/client/muxer_client.cpp",
      "$AV_CODEC_ROOT_DIR/services/services/muxer/ipc/muxer_service_proxy.cpp",
    ]
  }

  deps = [
      "$AV_CODEC_ROOT_DIR/services/engine:av_codec_engine_package",
      "$AV_CODEC_ROOT_DIR/services/utils:av_codec_format",
      "//third_party/bounds_checking_function:libsec_static",
  ]

  external_deps = [
      "c_utils:utils",
      "hiviewdfx_hilog_native:libhilog",
      "graphic_standard:surface",
      "ipc:ipc_single",
      "samgr:samgr_proxy",
  ]

  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}
