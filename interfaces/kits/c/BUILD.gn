# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/av_codec/config.gni")

AV_CODEC_ROOT_DIR = "//foundation/multimedia/av_codec"

group("capi_packages") {
  deps = []
  if (multimedia_av_codec_support_capi) {
    deps += [
      "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
      "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_codec",
      "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_avmuxer",
      "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_avdemuxer",
      "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_avsource",
    ]
  }
}

config("av_codec_capi_config") {
  # include_dirs = [
  #   "$AV_CODEC_ROOT_DIR/interfaces/inner_api/native",
  #   "$AV_CODEC_ROOT_DIR/interfaces/kits/c",
  #   "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avmuxer",
  #   "$AV_CODEC_ROOT_DIR/frameworks/native/capi/common",
  #   "$AV_CODEC_ROOT_DIR/services/utils",
  #   "$AV_CODEC_ROOT_DIR/services/dfx/include",
  #   "foundation/multimedia/av_codec/interfaces/kits/c",
  # ]

  include_dirs = [
    "//foundation/multimedia/av_codec/",
    "//foundation/multimedia/av_codec/frameworks/",
    "//foundation/multimedia/av_codec/frameworks/native/",
    "//foundation/multimedia/av_codec/frameworks/native/avcodec/",
    "//foundation/multimedia/av_codec/frameworks/native/avcodeclist/",
    "//foundation/multimedia/av_codec/frameworks/native/avdemuxer/",
    "//foundation/multimedia/av_codec/frameworks/native/avmuxer/",
    "//foundation/multimedia/av_codec/frameworks/native/avsource/",
    "//foundation/multimedia/av_codec/frameworks/native/capi/",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avcodec",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avdemuxer",
    "//foundation/multimedia/av_codec/frameworks/native/capi/avmuxer",
    "//foundation/multimedia/av_codec/frameworks/native/capi/common",
    "//foundation/multimedia/av_codec/frameworks/native/common",
    "//foundation/multimedia/av_codec/interfaces/",
    "//foundation/multimedia/av_codec/interfaces/inner_api/",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native",
    "//foundation/multimedia/av_codec/interfaces/kits/",
    "//foundation/multimedia/av_codec/interfaces/kits/c/",
    "//foundation/multimedia/av_codec/interfaces/kits/c/avmuxer/",
    "//foundation/multimedia/av_codec/services/",
    "//foundation/multimedia/av_codec/services/dfx/",
    "//foundation/multimedia/av_codec/services/dfx/include/",
    "//foundation/multimedia/av_codec/services/engine/",
    "//foundation/multimedia/av_codec/services/engine/avcodeclist",
    "//foundation/multimedia/av_codec/services/engine/demuxer",
    "//foundation/multimedia/av_codec/services/engine/demuxer/include",
    "//foundation/multimedia/av_codec/services/engine/factory",
    "//foundation/multimedia/av_codec/services/engine/plugin/",
    "//foundation/multimedia/av_codec/services/engine/plugin/common",
    "//foundation/multimedia/av_codec/services/engine/plugin/core",
    "//foundation/multimedia/av_codec/services/engine/plugin/interface",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/demuxer/",
    "//foundation/multimedia/av_codec/services/engine/plugin/plugins/demuxer/ffmpeg_demuxer/",
    "//foundation/multimedia/av_codec/services/engine/source",
    "//foundation/multimedia/av_codec/services/engine/source/include",
    "//foundation/multimedia/av_codec/services/include/",
    "//foundation/multimedia/av_codec/services/services/",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/client",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/ipc",
    "//foundation/multimedia/av_codec/services/services/avcodeclist/server",
    "//foundation/multimedia/av_codec/services/services/codec/",
    "//foundation/multimedia/av_codec/services/services/codec/client",
    "//foundation/multimedia/av_codec/services/services/codec/ipc",
    "//foundation/multimedia/av_codec/services/services/codec/server",
    "//foundation/multimedia/av_codec/services/services/codecbase/",
    "//foundation/multimedia/av_codec/services/services/codecbase/server/",
    "//foundation/multimedia/av_codec/services/services/codecbase/server/include/",
    "//foundation/multimedia/av_codec/services/services/common/",
    "//foundation/multimedia/av_codec/services/services/demuxer/",
    "//foundation/multimedia/av_codec/services/services/demuxer/client/",
    "//foundation/multimedia/av_codec/services/services/demuxer/ipc/",
    "//foundation/multimedia/av_codec/services/services/demuxer/server/",
    "//foundation/multimedia/av_codec/services/services/muxer/",
    "//foundation/multimedia/av_codec/services/services/muxer/client/",
    "//foundation/multimedia/av_codec/services/services/muxer/ipc/",
    "//foundation/multimedia/av_codec/services/services/muxer/server/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/client/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/ipc/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/server/",
    "//foundation/multimedia/av_codec/services/services/sa_avcodec/server/include/",
    "//foundation/multimedia/av_codec/services/services/source/",
    "//foundation/multimedia/av_codec/services/services/source/client/",
    "//foundation/multimedia/av_codec/services/services/source/ipc/",
    "//foundation/multimedia/av_codec/services/services/source/server/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/server/",
    "//foundation/multimedia/av_codec/services/services/sourcebase/server/include/",
    "//foundation/multimedia/av_codec/services/utils/",
    "//foundation/multimedia/av_codec/services/utils/include/",
    "//foundation/graphic/graphic_2d/frameworks/surface/include",
  ]

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-all",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wdate-time",
  ]

  cflags_cc = [
    "-std=c++17",
    "-fno-rtti",
  ]
}

ohos_shared_library("native_av_codec_core") {
  install_enable = true

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../../cfi_blocklist.txt"
  }

  configs = [ ":av_codec_capi_config" ]
  
  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/common/native_avformat.cpp",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/common/native_avmemory.cpp",
  ]

  if (multimedia_av_codec_support_codeclist) {
    sources += [
#    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/common/native_avcapability.cpp",
    ]
  }

  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/services/utils:av_codec_format",
  ]

  external_deps = [
    "graphic_standard:surface",
    "hiviewdfx_hilog_native:libhilog",
  ]
  output_extension = "so"
  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}

ohos_shared_library("native_av_codec_codec") {
  install_enable = true

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../../cfi_blocklist.txt"
  }

  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec/native_avcodec_base.cpp",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec/native_audio_decoder.cpp",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec/native_audio_encoder.cpp",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec/native_video_decoder.cpp",
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avcodec/native_video_encoder.cpp",
  ]

  configs = [ ":av_codec_capi_config" ]

  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/services/utils:av_codec_format",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_standard:surface",
    "hiviewdfx_hilog_native:libhilog",
    "graphic_standard:surface",
  ]
  output_extension = "so"
  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}

ohos_shared_library("native_av_codec_avmuxer") {
  install_enable = true
  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avmuxer/native_avmuxer.cpp",
  ]

  public_configs = [ ":av_codec_capi_config" ]

  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/services/utils:av_codec_format",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_standard:surface",
    "hiviewdfx_hilog_native:libhilog",
    "graphic_standard:surface",
  ]
  output_extension = "so"
  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}

ohos_shared_library("native_av_codec_avdemuxer") {
  install_enable = true
  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avdemuxer/native_avdemuxer.cpp",
  ]

  public_configs = [ ":av_codec_capi_config" ]

  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/services/utils:av_codec_format",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_standard:surface",
    "hiviewdfx_hilog_native:libhilog",
    "graphic_standard:surface",
  ]
  output_extension = "so"
  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}

ohos_shared_library("native_av_codec_avsource") {
  install_enable = true
  sources = [
    "$AV_CODEC_ROOT_DIR/frameworks/native/capi/avsource/native_avsource.cpp",
  ]

  public_configs = [ ":av_codec_capi_config" ]

  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/services/utils:av_codec_format",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_standard:surface",
    "hiviewdfx_hilog_native:libhilog",
    "graphic_standard:surface",
  ]
  output_extension = "so"
  subsystem_name = "multimedia"
  part_name = "multimedia_av_codec"
}