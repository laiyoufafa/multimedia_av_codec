# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/av_codec/config.gni")

MEDIA_ROOT_DIR = "//foundation/multimedia/av_codec/"
module_output_path = "av_codec/avcodec"

avcodec_unittest_native_include_dirs = [
  "//graphic/graphic_2d/interfaces/innerkits/surface",
  "//foundation//window/window_manager/interfaces/innerkits/wm",
  "$MEDIA_ROOT_DIR/interfaces/inner_api/native",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/audiodecoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/audioencoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/avcodec_info/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/avcodec_list/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/avformat/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/avmemory/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/enum/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/surface/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/videodecoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/native/videoencoder/",
  "$MEDIA_ROOT_DIR/test/unittest/common/include/",
]

avcodec_unittest_capi_include_dirs = [
  "//graphic/graphic_2d/interfaces/kits/surface",
  "//graphic/graphic_2d/interfaces/inner_api/surface",
  "//foundation//window/window_manager/interfaces/innerkits/wm",
  "$MEDIA_ROOT_DIR/interfaces/kits/c",
  "$MEDIA_ROOT_DIR/interfaces/inner_api/native",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/audiodecoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/audioencoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/avformat/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/avmemory/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/surface/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/videodecoder/",
  "$MEDIA_ROOT_DIR/test/unittest/avcodec_test/capi/videoencoder/",
  "$MEDIA_ROOT_DIR/test/unittest/common/include/",
  "../../../../../../commonlibrary/c_utils/base/include",
  "../../../../../../foundation/multimedia/image_framework/interfaces/innerkits/include",
]

avcodec_unittest_cflags = [
  "-std=c++17",
  "-fno-rtti",
  "-fno-exceptions",
  "-Wall",
  "-fno-common",
  "-fstack-protector-strong",
  "-Wshadow",
  "-FPIC",
  "-FS",
  "-O2",
  "-D_FORTIFY_SOURCE=2",
  "-fvisibility=hidden",
  "-Wformat=2",
  "-Wdate-time",
  "-Werror",
  "-Wextra",
  "-Wimplicit-fallthrough",
  "-Wsign-compare",
  "-Wunused-parameter",
]

##################################################################################################################
ohos_unittest("vcodec_native_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_native_include_dirs
  include_dirs += [
    "./",
    "./vcodec_test",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./native/avcodec_info/avcodec_info_native_mock.cpp",
      "./native/avcodec_list/avcodec_list_native_mock.cpp",
      "./native/avcodec_mock_factory.cpp",
      "./native/avformat/avformat_native_mock.cpp",
      "./native/avmemory/avmemory_native_mock.cpp",
      "./native/enum/enum_native_mock.cpp",
      "./native/surface/surface_native_mock.cpp",
      "./native/videodecoder/videodec_native_mock.cpp",
      "./native/videoencoder/videoenc_native_mock.cpp",
      "./vcodec_test/vcodec_unit_test.cpp",
      "./vcodec_test/vdec_mock.cpp",
      "./vcodec_test/venc_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/window/window_manager/wm:libwm",
  ]

  resource_config_file =
      "//foundation/multimedia/av_codec/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("acodec_native_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_native_include_dirs
  include_dirs += [
    "./",
    "./acodec_test",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./acodec_test/acodec_mock.cpp",
      "./acodec_test/acodec_unit_test.cpp",
      "./native/audiodecoder/audiodec_native_mock.cpp",
      "./native/audioencoder/audioenc_native_mock.cpp",
      "./native/avcodec_info/avcodec_info_native_mock.cpp",
      "./native/avcodec_list/avcodec_list_native_mock.cpp",
      "./native/avcodec_mock_factory.cpp",
      "./native/avformat/avformat_native_mock.cpp",
      "./native/avmemory/avmemory_native_mock.cpp",
      "./native/enum/enum_native_mock.cpp",
      "./native/surface/surface_native_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/window/window_manager/wm:libwm",
  ]

  resource_config_file =
      "//foundation/multimedia/av_codec/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("avcodec_list_native_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_native_include_dirs
  include_dirs += [
    "./",
    "./avcodec_list_test",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./avcodec_list_test/avcodec_list_unit_test.cpp",
      "./native/avcodec_info/avcodec_info_native_mock.cpp",
      "./native/avcodec_list/avcodec_list_native_mock.cpp",
      "./native/avcodec_mock_factory.cpp",
      "./native/avformat/avformat_native_mock.cpp",
      "./native/enum/enum_native_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
  ]

  resource_config_file =
      "//foundation/multimedia/av_codec/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("format_native_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_native_include_dirs
  include_dirs += [
    "./",
    "./format_test",
  ]
  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./format_test/format_unit_test.cpp",
      "./native/avcodec_mock_factory.cpp",
      "./native/avformat/avformat_native_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
  ]
  external_deps = [ "bounds_checking_function:libsec_shared" ]
}

##################################################################################################################
ohos_unittest("vcodec_capi_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_capi_include_dirs
  include_dirs += [
    "./",
    "./vcodec_test",
    "//foundation/graphic/graphic_2d/frameworks/surface/include",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/surface",
    "//foundation/graphic/graphic_2d/interfaces/inner_api/common",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./capi/avcodec_mock_factory.cpp",
      "./capi/avformat/avformat_capi_mock.cpp",
      "./capi/avmemory/avmemory_capi_mock.cpp",
      "./capi/surface/surface_capi_mock.cpp",
      "./capi/videodecoder/videodec_capi_mock.cpp",
      "./capi/videoencoder/videoenc_capi_mock.cpp",
      "./vcodec_test/vcodec_unit_test.cpp",
      "./vcodec_test/vdec_mock.cpp",
      "./vcodec_test/venc_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d:libsurface",
    "//foundation/graphic/graphic_2d/frameworks/surface:surface",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_codec",

    # "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_codecbase",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",

    # "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_venc",
    "//foundation/window/window_manager/wm:libwm",
  ]

  resource_config_file =
      "//foundation/multimedia/av_codec/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("acodec_capi_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_capi_include_dirs
  include_dirs += [
    "./",
    "./acodec_test",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./acodec_test/acodec_mock.cpp",
      "./acodec_test/acodec_unit_test.cpp",
      "./capi/audiodecoder/audiodec_capi_mock.cpp",
      "./capi/audioencoder/audioenc_capi_mock.cpp",
      "./capi/avcodec_mock_factory.cpp",
      "./capi/avformat/avformat_capi_mock.cpp",
      "./capi/avmemory/avmemory_capi_mock.cpp",
    ]
  }

  deps = [
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",

    # "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_adec",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_codec",

    # "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_codecbase",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
    "//foundation/window/window_manager/wm:libwm",
  ]

  resource_config_file =
      "//foundation/multimedia/av_codec/test/unittest/resources/ohos_test.xml"
}

##################################################################################################################
ohos_unittest("format_capi_unit_test") {
  module_out_path = module_output_path
  include_dirs = avcodec_unittest_capi_include_dirs
  include_dirs += [
    "./",
    "./format_test",
  ]

  cflags = avcodec_unittest_cflags

  if (multimedia_av_codec_support_codec) {
    sources = [
      "./capi/avcodec_mock_factory.cpp",
      "./capi/avformat/avformat_capi_mock.cpp",
      "./format_test/format_unit_test.cpp",
    ]
  }
  deps = [
    "//foundation/multimedia/av_codec/interfaces/inner_api/native:av_codec_client",
    "//foundation/multimedia/av_codec/interfaces/kits/c:native_av_codec_core",
    "//foundation/window/window_manager/wm:libwm",
  ]
  external_deps = [
    "bounds_checking_function:libsec_shared",
    "graphic_standard:surface",
  ]
}
